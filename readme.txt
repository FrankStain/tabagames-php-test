
Что сделано:
- Система классов предметной области с общей архитектурой.
- UML имеется, но в рукописном варианте, на руках нету ни Visio, ни Enterprise Architect...
- Полностью, эксклюзивно, с нуля проработанный технический обвес предметной среды в виде пары фабрик, автозагрузчика и реестра сервисов.
- Наборчик примеров/прототипов использования с запускалкой из веб-интерфейса (http://test.blogus.ru/blog-test.php)
(веб-интерфейс не нужен и слава богу... я решил не делать тесты в виде PHPUnit-пакетов, решил обойтись простыми прототипами)
- Папка находится под контролем GIT! Можно посмотреть эволюцию проекта и проследить, как и в какое время я строил код. :)

Что не нравится:
- Логин у пользователя все таки должен быть уникальным, для его проверки надо перегрузить save() в CUser и внедрить проверку с исключением.
- Некоторые свойства объектов по смыслу все таки обязательные, как Login/Passwd у пользователя, NoteId/Author у текстовых сообщений.
Для этого и задумана такая организация свойств, они расширяемы. В массиве aProperties к свойсвтам стоит добавить метку 'Required' => true|false
по аналогии с 'Modified', в методе save() делать проверку на заполненность этих полей и, члучись чего, падать с исключением.
- Я с монго совсем не работал... Скорее всего древовидную структуру комментариев можно реализовать и без поля ParentNoteId.
Если это возможно, хотелось бы заточить на это работу класса CNoteComment.

На эти вещи нужно время... Этот пример я положу к себе на github и тихонько избавлю от этих недоделок, авось кто-нибудь его и оценит. :)

--------------------------------------------------------------------------------------------------------
> Задача
Реализовать модели для классического блога. Веб-интерфейс реализовывать не требуется.

> Технологии
Необходимо использовать PHP5 и MongoDB. Не рекомендуется использовать какие либо фреймворки или ORM.

> Сущности

Заметка :
Данные
•	Заголовок
•	Текст заметки
•	Автор (пользователь)
•	Дата публикации
•	Теги

Манипуляции
•	Создать
•	Редактировать
•	Удалить
•	Найти заметку по id
•	Выборка всех заметок
•	Выборка заметок по автору
•	Выборка заметок по дате публикации (задается временной диапазон)
•	Выборка заметок по тегу
•

Комментарий :
Комментарии добавляются к заметкам и имеют древовидную структуру.

Данные
•	Автор (пользователь)
•	Дата
•	Текст комментария

Манипуляции
•	Создать
•	Удалить
•	Выборка всех комментариев к заметке


Пользователь :
Пароль пользователя должен хранится в зашифрованном виде. Алгоритм шифрования значения не имеет.

Данные
•	Логин
•	Электронная почта
•	Зашифрованный пароль

Манипуляции
•	Создать
•	Редактировать
•	Удалить
•	Найти пользователя по id
•	Найти пользователя по логину
•	Верификация пользователя: по логину и незашифрованному паролю определить, верный ли пароль
